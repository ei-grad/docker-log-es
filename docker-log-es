#!/usr/bin/env python

from os import environ as env
import socket

import ujson as json

from tornado import gen
from tornado.httpclient import AsyncHTTPClient
from tornado.ioloop import IOLoop
from tornado.netutil import Resolver


DOCKER_HOST = env.get('DOCKER_HOST', 'unix:///var/run/docker.sock')


class UnixResolver(Resolver):

    def initialize(self, resolver):
        self.resolver = resolver

    def close(self):
        self.resolver.close()

    @gen.coroutine
    def resolve(self, host, port, *args, **kwargs):
        scheme, path = DOCKER_HOST.split('://')
        if host == 'docker' and scheme == 'unix':
            raise gen.Return([(socket.AF_UNIX, path)])
        result = yield self.resolver.resolve(host, port, *args, **kwargs)
        raise gen.Return(result)


class LineCollector:
    def __init__(self, emit):
        self.emit = emit
        self.buf = ""

    def __call__(self, data):
        self.buf += data
        if '\n' in self.buf:
            d, self.buf = self.buf.split('\n', 1)
            self.emit(d)


class RegexpCollector:
    def __init__(self, emit, regexp):
        self.emit = emit
        self.regexp = regexp

    def __call__(self, data):
        self.buf += data
        # TODO:


class Filter:
    def __init__(self, container, stream, emit):
        self.container = container
        self.stream = stream
        self._emit = emit
        self.collector = LineCollector(self.emit)

    def __call__(self, data):
        self.collector(data)

    def emit(self, data):
        self._emit({
            'container': self.container['Names'][0].lstrip('/'),
            'stream': self.stream,
            'message': data
        })


@gen.coroutine
def start(container, stream):
    url = 'http://docker/containers/%s/logs?follow=1&tail=0&' % container['Id']
    http.fetch(url + '%s=1' % stream,
               callback=lambda ret: start(container, stream),
               streaming_callback=Filter(container, stream, queue.append))


@gen.coroutine
def send_data(data):
    print('Send data: %s' % data)


@gen.coroutine
def main():

    resp = yield http.fetch('http://docker/containers/json')
    assert resp.code == 200
    containers = json.loads(resp.body)

    for i in containers:
        start(i, 'stdout')
        start(i, 'stderr')

    while True:
        if queue:
            data = list(queue)
            del queue[:]
            yield send_data(data)
        yield gen.sleep(float(env.get('BULK_INTERVAL', '1')))


if __name__ == "__main__":
    resolver = UnixResolver(resolver=Resolver())
    AsyncHTTPClient.configure(None, resolver=resolver)
    http = AsyncHTTPClient()
    queue = []
    IOLoop.current().run_sync(main)
